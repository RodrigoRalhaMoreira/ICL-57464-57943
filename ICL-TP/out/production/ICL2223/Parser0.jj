PARSER_BEGIN(Parser)

import java.util.LinkedList;import java.util.List;import java.util.Map;
import java.util.HashMap;
public class Parser{
    public Parser(){}
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < BOOLEAN: ( "true" | "false") >
  |
  <LET: "let">
  |
  <NEW:"new">
  |
  <ASSIGN: ":=">
  |
  <REF : "!">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  <LOGICALEQUAL: "==">
  |
  <LOWER: "<">
  |
  <LOWEROREQUAL: "<=">
  |
  <OR:"||">
  |
  <AND:"&&">
  |
  <NOT: "~">
  |
  <GREATER: ">">
  |
  <GREATEROREQUAL: ">=">
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQUAL: "=" >
  |
  < SEMCOL: ";" >
  |
  < FINAL: ";;">
}

ASTNode Start():
{ ASTNode t; }
{
   t = S() <FINAL>
   { return t; }
}

ASTNode S():
{Token op;
     ASTNode t1, t2;}
{
  t1 = SE() ( <SEMCOL> t2=SE() {
t1 = new ASTSemCol(t1, t2);
    })*
  { return t1;}
}

ASTNode SE():
{ Token op;
      ASTNode t1, t2;}
{
  t1 = BA() ( <ASSIGN> t2=BA() {
	t1 = new ASTAssign(t1, t2);
    })*
  { return t1;}
}

ASTNode BA():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=BM()  (op=<OR> t2=BM() {
    			t1 = new ASTOr(t1,t2);
    			})*
  { return t1;}
}

ASTNode BM():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=Relop() ( op=<AND> t2=Relop() {
    			t1 = new ASTAnd(t1,t2);
    			})*
  { return t1;}
}

ASTNode Relop():
{
    Token op;
    ASTNode t1, t2;
}
{
t1=Exp() ( ( op=<GREATER> | op=<LOWER> | op=<LOWEROREQUAL> | op=<GREATEROREQUAL> | op=<LOGICALEQUAL>) t2=Exp() {
    			switch (op.kind){
                    case GREATER:
                        t1 = new ASTGreater(t1,t2);
                    break;
                    case LOWER:
                        t1 = new ASTLower(t1,t2);
                    break;
                    case LOWEROREQUAL:
                        t1 = new ASTLowerOrEqual(t1,t2);
                    break;
                    case GREATEROREQUAL:
                        t1 = new ASTGreaterOrEqual(t1,t2);
                    break;
                     case LOGICALEQUAL:
                        t1 = new ASTLogicalEqual(t1,t2);
                    break;
                    default:
    			}
    			})?
  { return t1;}
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
   t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() {
    			if (op.kind == PLUS)
    				t1 = new ASTPlus(t1,t2);
                else
                	t1 = new ASTSub(t1,t2); })*
  { return t1;}
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
   t1=Fact() (
        ( op=<TIMES> | op=<DIV> ) t2=Term() {
    			if (op.kind == TIMES)
    				t1 = new ASTTimes(t1,t2);
                else
                	t1 = new ASTDiv(t1,t2); })*
  { return t1;}
}


ASTNode Fact() :
{ Token n;
  ASTNode t, t1,t2;
  Map<String, ASTNode> l = new HashMap<String, ASTNode>();
}
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image));}
   | <LPAR> t=S() <RPAR>
   | n =<BOOLEAN> {t = new ASTBoolean(Boolean.parseBoolean(n.image));}
   | n =<Id> { t = new ASTId(n.image);}
   | <NEW> t1=Fact() {t = new ASTNew(t1);}
   | <REF> t1=Fact() { t = new ASTRef(t1); }
   | <LBRA> ( <LET> n=<Id> <EQUAL> t1=SE() { l.put(n.image, t1); } <SEMCOL> )+ t2=S() <RBRA>  { t = new ASTDef(l, t2); }
   | <MINUS> t1=Fact() { t = new ASTNeg(t1);}
   | <NOT> t1=Fact() {t = new ASTNot(t1);}
   )

   { return t; }
}





















