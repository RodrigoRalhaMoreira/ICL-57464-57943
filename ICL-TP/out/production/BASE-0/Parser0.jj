PARSER_BEGIN(Parser)

import java.util.Map;
import java.util.HashMap;
public class Parser{
    public Parser(){
        }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  <LET: "let">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EL: "\n" >
  |
  < EQUAL: "=" >
  |
  < SEMCOL: ";" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {if (op.kind == TIMES)
                        t1 = new ASTTimes(t1,t2);
                 else   t1 = new ASTDiv(t1,t2);
         }
		)?
     { return t1; } 
}


ASTNode Fact() :
{ Token n;
 ASTNode t;
ASTNode t1;
ASTNode t2;
Map<String,ASTNode> l = new HashMap();}
{
   (

        n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   |    n = <Id> { t = new ASTId(n.image);}
   |    <LPAR> t=Exp() <RPAR>
   |    <LBRA> (<LET> n=<Id> <EQUAL> t1=Exp() <SEMCOL> {l.put(n.image,t1);})+ t2=Exp() <RBRA>{t = new ASTDef(l,t2);}
   |    {t = new ASTNum(0); }

   )

   { return t; }
}





















